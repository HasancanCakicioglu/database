// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/person.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7390361922960733702),
      name: 'Person',
      lastPropertyId: const IdUid(4, 2414556039982062488),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7422828569357134777),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1683044896983679593),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 199147434836216611),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2414556039982062488),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5913989292023727504),
            relationTarget: 'Coffe')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8305391755476545668),
      name: 'Coffe',
      lastPropertyId: const IdUid(3, 1633280936242908794),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4719038136455689356),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9042892106413901664),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1633280936242908794),
            name: 'price',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'orders', srcEntity: 'Person', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8305391755476545668),
      lastIndexId: const IdUid(1, 5913989292023727504),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [629224900314273510],
      retiredIndexUids: const [],
      retiredPropertyUids: const [7955676684958979660, 5660112907187402928],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Person: EntityDefinition<Person>(
        model: _entities[0],
        toOneRelations: (Person object) => [object.customer],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addInt64(3, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Person(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.customer.attach(store);
          return object;
        }),
    Coffe: EntityDefinition<Coffe>(
        model: _entities[1],
        toOneRelations: (Coffe object) => [],
        toManyRelations: (Coffe object) => {
              RelInfo<Person>.toOneBacklink(
                      4, object.id, (Person srcObject) => srcObject.customer):
                  object.orders
            },
        getId: (Coffe object) => object.id,
        setId: (Coffe object, int id) {
          object.id = id;
        },
        objectToFB: (Coffe object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.price);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Coffe(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              price: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(
              object.orders,
              store,
              RelInfo<Person>.toOneBacklink(
                  4, object.id, (Person srcObject) => srcObject.customer),
              store.box<Coffe>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// see [Person.id]
  static final id = QueryIntegerProperty<Person>(_entities[0].properties[0]);

  /// see [Person.firstName]
  static final firstName =
      QueryStringProperty<Person>(_entities[0].properties[1]);

  /// see [Person.lastName]
  static final lastName =
      QueryStringProperty<Person>(_entities[0].properties[2]);

  /// see [Person.customer]
  static final customer =
      QueryRelationToOne<Person, Coffe>(_entities[0].properties[3]);
}

/// [Coffe] entity fields to define ObjectBox queries.
class Coffe_ {
  /// see [Coffe.id]
  static final id = QueryIntegerProperty<Coffe>(_entities[1].properties[0]);

  /// see [Coffe.name]
  static final name = QueryStringProperty<Coffe>(_entities[1].properties[1]);

  /// see [Coffe.price]
  static final price = QueryIntegerProperty<Coffe>(_entities[1].properties[2]);
}
